{"version":3,"sources":["../node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator/index.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js","store/services/API.js","store/actions/storiesActions.js","views/stories/StorieScreen.js"],"names":["module","exports","asyncGeneratorStep","gen","resolve","reject","_next","_throw","key","arg","info","value","error","done","Promise","then","_asyncToGenerator","fn","self","this","args","arguments","apply","err","undefined","marvelURL","hash","apikey","getMarvelCharacters","options","Object","assign","offset","name","exactMatch","sortName","limit","url","fetch","res","json","resObj","code","data","total","Error","pages","Math","floor","characters","results","maxPage","e","console","getComicsByCharacter","characterId","single_character","getStorieById","storieId","url_comics","a","log","storie","datacomics","comics","items","setSingleStorie","type","types","storieLoadSingle","payload","StorieScreen","dispatch","useDispatch","id","useParams","single_storie","useSelector","state","stories","loadStorie","useEffect","className","title","description","map","comic","sm","md","lg","src","thumbnail","path","fluid","style","maxWidth","c","creators","pageCount","prices","price"],"mappings":"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","file":"static/js/6.87f003ac.chunk.js","sourcesContent":["module.exports = require(\"regenerator-runtime\");\n","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nexport default function _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}","const marvelURL = 'https://gateway.marvel.com/v1/public/';\n\n// const hash = \"03e206b64b2c7dd6eea20b183d2f259d\";\n// const apikey = \"57a1a3bed71f089b1352bee0703ccbfe\";\n\nconst hash = \"03e206b64b2c7dd6eea20b183d2f259d\";\nconst apikey = \"57a1a3bed71f089b1352bee0703ccbfe\";\n\n\nconst getMarvelCharacters = (options) => {\n  const {\n    offset,\n    name,\n    exactMatch,\n    sortName,\n    limit,\n  } = Object.assign({\n    offset: 0,\n    name: '',\n    exactMatch: false,\n    sortName: '',\n    limit: 20,\n  }, options);\n\n  let url =\n    `${marvelURL}characters?ts=1&apikey=${apikey}&hash=${hash}&offset=${offset}&orderBy=${sortName}name&limit=${limit}`;\n  if (name) {\n    if (exactMatch) { url += `&name=${name}`; }\n    else { url += `&nameStartsWith=${name}`; }\n  }\n  return fetch(url)\n    .then(res => res.json())\n    .then((resObj) => {\n      try {\n        if (resObj.code === 200) {\n          if (offset > resObj.data.total) {\n            throw new Error('Page does not exist.');\n          } else {\n            const pages = Math.floor(resObj.data.total / limit);\n            return {\n              characters: resObj.data.results,\n              maxPage: resObj.data.total % limit > 0 ? pages + 1 : pages,\n            };\n          }\n        } else {\n          throw new Error(`Marvel API bad response. Status code ${resObj.code}.`);\n        }\n      } catch (e) {\n        console.error(e);\n        return {\n          characters: [],\n          maxPage: 0,\n        };\n      }\n    });\n}\n\nconst getComicsByCharacter = (characterId, offset = 0) =>{\n    // const URI = `/v1/public/characters/${characterId}/comics`\n    // const params = `?apikey=${config.publicKey}&limit=20&offset=${offset}`\n    const url = `${marvelURL}characters/${characterId}?ts=1&apikey=${apikey}&hash=${hash}&offset=${offset}&limit=20`\n\n    return fetch(url).then(res => res.json()).then((resObj)=>{\n      return {\n        single_character: resObj.data.results[0]\n      };\n    });\n  }\n\n  const getStorieById = (storieId) =>{\n    const url = `${marvelURL}stories/${storieId}?ts=1&apikey=${apikey}&hash=${hash}`\n    const url_comics = `${marvelURL}stories/${storieId}/comics?ts=1&apikey=${apikey}&hash=${hash}`\n    return fetch(url).then(res => res.json()).then(async (resObj)=>{\n      console.log('getStorieById', resObj);\n      if (resObj.code === 200) {\n        let storie = resObj.data?.results[0]\n        let datacomics = await fetch(url_comics).then(res => res.json());\n        storie.comics.items = datacomics.data?.results;\n        return {\n          storie: storie\n        };\n      } else {\n        return {\n          storie: null\n        };\n      }\n      \n    });\n  }\n\nconst getCharapters = ()=> {\n  const url = `https://gateway.marvel.com:443/v1/public/characters?ts=1&apikey=${apikey}&hash=${hash}`;\n  return fetch(url).then((res)=>res.json());\n}\n\n\nexport {\n  getMarvelCharacters,\n  getComicsByCharacter,\n  getCharapters,\n  getStorieById,\n};","import {types} from '../types';\nimport {  getStorieById} from '../services/API';\n\n\n\nexport const startLoadingSingleStorie = ( options ) => {\n    return async( dispatch ) => {\n        const storie = await getStorieById( options.id );\n        dispatch( setSingleStorie( {...storie }));\n\n    }\n}\n\n\n// export const setCharapters = ( charapters ) => ({\n//     type: types.charaptersLoad,\n//     payload: charapters\n// });\n\nexport const setSingleStorie = ( storie ) => ({\n    type: types.storieLoadSingle,\n    payload: storie\n});\n\n","import { CCard, CCardBody, CCardHeader, CCol, CContainer, CImg, CRow } from \"@coreui/react\";\nimport { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useParams } from \"react-router-dom\";\nimport { startLoadingSingleStorie } from \"../../store/actions/storiesActions\";\n\nconst StorieScreen = () =>{\n\n    const dispatch = useDispatch();\n    const { id } = useParams();\n    const state_storie = useSelector( state => state.stories);\n    const single_storie = state_storie.single_storie;\n    console.log('single_storie', single_storie);\n\n    const loadStorie = () => {\n        dispatch(startLoadingSingleStorie({id: id}));\n    }\n    useEffect(() => {\n        loadStorie()\n      }, [id]);\n\n    return(\n        <>\n            {\n                (!!single_storie)? (\n                    <CContainer>\n                        <CRow >\n                            <CCol>\n                                <CCard>\n                                    <CCardBody>\n                                    <div className=\"h3 text-danger\">\n                                    { single_storie.title}\n                                    </div>\n                                    <div>\n                                    { single_storie.description}\n                                    </div>\n                                    </CCardBody>\n                                </CCard>\n                            </CCol>\n                        </CRow>\n                        <CRow>\n                            <CCol>\n                                <CCard>\n                                    <CCardHeader>\n                                        Comics\n                                    </CCardHeader>\n                                    <CCardBody>\n                                        <CRow>\n                                            {\n                                                single_storie?.comics?.items?.map(comic=>(\n                                                    <CCol sm=\"12\" md=\"6\" lg=\"6\">\n                                                        <div className=\"h3  text-info\">{comic.title}</div> \n                                                        \n                                                        \n                                                        <CRow>\n                                                            <CCol sm=\"12\" md=\"6\" lg=\"6\">\n                                                                <CImg\n                                                                src={comic?.thumbnail?.path + '.jpg'}\n                                                                fluid\n                                                                thumbnail\n                                                                className=\"mb-2\"\n                                                                style={{ maxWidth: \"300px\"}}\n                                                                />\n                                                            </CCol>\n                                                            <CCol sm=\"12\" md=\"6\" lg=\"6\">\n                                                                <strong>Characters:</strong>\n                                                                {\n                                                                    comic.characters?.items.map(c=>(\n                                                                        <span>{c.name}; </span> \n                                                                    ))\n                                                                }\n                                                                <hr></hr>\n                                                                <strong>Creators:</strong>\n                                                                {\n                                                                    comic.creators?.items.map(c=>(\n                                                                        <span>{c.name}; </span> \n                                                                    ))\n                                                                }\n                                                                \n                                                                <div className=\"h5  text-dark\">Page count: {comic.pageCount}</div> \n                                                                <div className=\"text-success\">Print price: $ {comic.prices[0]?.price}</div> \n                                                                <div className=\"text-success\">Digital price: $ {comic.prices[1]?.price}</div> \n                                                            </CCol>\n                                                        </CRow>\n                                                        \n                                                        \n                                                    </CCol>\n                                                    \n                                                ))\n                                            }\n                                        </CRow>\n                                    </CCardBody>\n                                </CCard>\n                            </CCol>\n                            \n                        </CRow>\n                    </CContainer>\n                    \n                ) : (\n                    <CContainer>\n                    <CRow >\n                        <CCol>\n                            <CCard>\n                                <CCardBody>\n                                    <div className=\"h1 text-danger\">Historia no encontrada :(</div> \n                                </CCardBody>\n                                \n                            </CCard>\n                        </CCol>\n                    </CRow>\n                </CContainer>\n                )\n            }\n        </>\n    );\n}\nexport default StorieScreen;"],"sourceRoot":""}