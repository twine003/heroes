{"version":3,"sources":["store/services/API.js","store/actions/charaptersActions.js","views/caracters/Caracter.js","views/widgets/PageButton.js","views/widgets/Paginator.js","views/widgets/Filter.js","views/caracters/CaractersScreen.js"],"names":["marvelURL","hash","apikey","getMarvelCharacters","options","Object","assign","offset","name","exactMatch","sortName","limit","url","fetch","then","res","json","resObj","code","data","total","Error","pages","Math","floor","characters","results","maxPage","e","console","error","getComicsByCharacter","characterId","single_character","getStorieById","storieId","url_comics","a","log","storie","datacomics","comics","items","startLoadingCharapters","dispatch","charapters","setCharapters","page","startLoadingSingleCharapter","id","setSingleCharapter","type","types","charaptersLoad","payload","charapter","charapterLoadSingle","Caracter","caracter","sm","lg","src","thumbnail","path","fluid","className","to","PageButton","props","current","role","onClick","clickHandler","defaultProps","onlyNumbers","event","key","charCode","keyCode","preventDefault","Paginator","state","setPages","i","p","push","setState","previous","minPage","onPrevious","handleChange","target","value","isNaN","onChangePage","input","this","nextProps","indexOf","htmlFor","ref","maxLength","onKeyDown","onKeyUp","aria-label","aria-hidden","map","onNext","Component","Filters","changeFilterByName","reset","trim","onReset","submit","onApply","changeExactMatchFlag","checked","onSubmit","controlId","onChange","bsStyle","Charapters","useDispatch","state_charapters","useSelector","useState","filter","setfilter","changePage","search","filters","limitPerPage","useEffect","md","paginator","Filter"],"mappings":"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","file":"static/js/7.b23e3f29.chunk.js","sourcesContent":["const marvelURL = 'https://gateway.marvel.com/v1/public/';\n\n// const hash = \"03e206b64b2c7dd6eea20b183d2f259d\";\n// const apikey = \"57a1a3bed71f089b1352bee0703ccbfe\";\n\nconst hash = \"03e206b64b2c7dd6eea20b183d2f259d\";\nconst apikey = \"57a1a3bed71f089b1352bee0703ccbfe\";\n\n\nconst getMarvelCharacters = (options) => {\n  const {\n    offset,\n    name,\n    exactMatch,\n    sortName,\n    limit,\n  } = Object.assign({\n    offset: 0,\n    name: '',\n    exactMatch: false,\n    sortName: '',\n    limit: 20,\n  }, options);\n\n  let url =\n    `${marvelURL}characters?ts=1&apikey=${apikey}&hash=${hash}&offset=${offset}&orderBy=${sortName}name&limit=${limit}`;\n  if (name) {\n    if (exactMatch) { url += `&name=${name}`; }\n    else { url += `&nameStartsWith=${name}`; }\n  }\n  return fetch(url)\n    .then(res => res.json())\n    .then((resObj) => {\n      try {\n        if (resObj.code === 200) {\n          if (offset > resObj.data.total) {\n            throw new Error('Page does not exist.');\n          } else {\n            const pages = Math.floor(resObj.data.total / limit);\n            return {\n              characters: resObj.data.results,\n              maxPage: resObj.data.total % limit > 0 ? pages + 1 : pages,\n            };\n          }\n        } else {\n          throw new Error(`Marvel API bad response. Status code ${resObj.code}.`);\n        }\n      } catch (e) {\n        console.error(e);\n        return {\n          characters: [],\n          maxPage: 0,\n        };\n      }\n    });\n}\n\nconst getComicsByCharacter = (characterId, offset = 0) =>{\n    // const URI = `/v1/public/characters/${characterId}/comics`\n    // const params = `?apikey=${config.publicKey}&limit=20&offset=${offset}`\n    const url = `${marvelURL}characters/${characterId}?ts=1&apikey=${apikey}&hash=${hash}&offset=${offset}&limit=20`\n\n    return fetch(url).then(res => res.json()).then((resObj)=>{\n      return {\n        single_character: resObj.data.results[0]\n      };\n    });\n  }\n\n  const getStorieById = (storieId) =>{\n    const url = `${marvelURL}stories/${storieId}?ts=1&apikey=${apikey}&hash=${hash}`\n    const url_comics = `${marvelURL}stories/${storieId}/comics?ts=1&apikey=${apikey}&hash=${hash}`\n    return fetch(url).then(res => res.json()).then(async (resObj)=>{\n      console.log('getStorieById', resObj);\n      if (resObj.code === 200) {\n        let storie = resObj.data?.results[0]\n        let datacomics = await fetch(url_comics).then(res => res.json());\n        storie.comics.items = datacomics.data?.results;\n        return {\n          storie: storie\n        };\n      } else {\n        return {\n          storie: null\n        };\n      }\n      \n    });\n  }\n\nconst getCharapters = ()=> {\n  const url = `https://gateway.marvel.com:443/v1/public/characters?ts=1&apikey=${apikey}&hash=${hash}`;\n  return fetch(url).then((res)=>res.json());\n}\n\n\nexport {\n  getMarvelCharacters,\n  getComicsByCharacter,\n  getCharapters,\n  getStorieById,\n};","import {types} from '../types';\nimport { getComicsByCharacter, getMarvelCharacters, getStorieById} from '../services/API';\n\nexport const startLoadingCharapters = ( options ) => {\n    return async( dispatch ) => {\n        const charapters = await getMarvelCharacters( options );\n        dispatch( setCharapters( {...charapters, page: options.page} ) );\n\n    }\n}\n\nexport const startLoadingSingleCharapter = ( options ) => {\n    return async( dispatch ) => {\n        const charapters = await getComicsByCharacter( options.id );\n        dispatch( setSingleCharapter( {...charapters, page: options.page} ) );\n\n    }\n}\n\n\nexport const setCharapters = ( charapters ) => ({\n    type: types.charaptersLoad,\n    payload: charapters\n});\n\nexport const setSingleCharapter = ( charapter ) => ({\n    type: types.charapterLoadSingle,\n    payload: charapter\n});\n\n","import React from 'react'\nimport {\n  CCard,\n  CCardBody,\n  CCol,\n  CRow,\n  CImg,\n\n} from '@coreui/react'\nimport { Link } from 'react-router-dom'\n\n\n\nconst Caracter = (caracter) => {\n    return (\n        <>\n            <CCol sm=\"6\" lg=\"4\">\n\n                <CCard>\n                    <CCardBody>\n                        <CRow>\n                            <CCol sm=\"6\">\n                                <CImg\n                                    src={caracter.thumbnail.path + '.jpg'}\n                                    fluid\n                                    thumbnail\n                                    className=\"mb-2\"\n                                    />\n                            </CCol>\n                            <CCol sm=\"6\">\n                                <p><b>{caracter.name}</b></p>\n                                <Link to={ `/caracter/${caracter.id}` } >Ver mas</Link>\n                            </CCol>\n                        </CRow>\n                    </CCardBody>\n                </CCard>\n                \n            </CCol>\n            \n            \n        </>\n    )\n}\n\nexport default Caracter\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst PageButton = (props) => (\n  <li className={props.current === props.page ? 'active': ''}>\n    <a role=\"button\" onClick={() => props.clickHandler(props.page)}>{props.page}</a>\n  </li>\n);\n\nPageButton.propTypes = {\n  page: PropTypes.number.isRequired,\n  current: PropTypes.number.isRequired,\n  clickHandler: PropTypes.func,\n};\n\nPageButton.defaultProps = {\n  clickHandler: () => {},\n};\n\nexport default PageButton;","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport PageButton from './PageButton';\n\nconst onlyNumbers = (event) => {\n  const key = event.charCode || event.keyCode || 0;\n  if (!(\n    key === 8 ||\n    key === 9 ||\n    key === 13 ||\n    key === 46 ||\n    (key >= 35 && key <= 40) ||\n    (key >= 48 && key <= 57) ||\n    (key >= 96 && key <= 105)\n  )) {\n    event.preventDefault();\n  }\n};\n\nclass Paginator extends Component {\n  state = {\n    pages: [],\n  };\n\n  componentWillMount() {\n    this.setPages(this.props.page, this.props.maxPage);\n  }\n\n  componentWillReceiveProps(nextProps) {\n    if (this.state.pages.indexOf(nextProps.page) === -1) {\n      this.setPages(nextProps.page, nextProps.maxPage);\n    }\n  }\n\n  setPages = (page, maxPage) => {\n    const pages = [];\n    if (page > 0) {\n      for (let i = 0; i < 5; i++) {\n        const p = page + i;\n        if (p <= maxPage) {\n          pages.push(p);\n        }\n      }\n    }\n    this.setState({ pages });\n  }\n\n  previous = () => {\n    const minPage = this.state.pages[0];\n    if (minPage > 1) {\n      this.setPages(minPage - 5, this.props.maxPage);\n      this.props.onPrevious(minPage);\n    }\n  }\n\n  handleChange = (event) => {\n    if (event.key === 'Enter') {\n      const page = +event.target.value;\n      try {\n        if (isNaN(page) || page === 0 || page > this.props.maxPage) {\n          throw new Error('Invalid number page.');\n        }\n        else {\n          this.props.onChangePage(page);\n          this.input.value = '';\n        }\n      } catch (e) {\n        console.error(e);\n        this.input.value = '';\n      }\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"Paginator\">\n        <div className=\"form-group-lg text-center center-block Paginator-go2Page\">\n          <label htmlFor=\"go2Page\">Go to Page</label>\n          <input id=\"go2Page\"\n            ref={input => this.input = input}\n            type=\"text\"\n            maxLength={2}\n            className=\"form-control text-center\"\n            onKeyDown={onlyNumbers}\n            onKeyUp={this.handleChange} />\n          <small className=\"help-block\">\n            Page {this.props.page} out of {this.props.maxPage}.\n          </small>\n        </div>\n        <nav className=\"text-center\" aria-label=\"Page navigation\">\n          <ul className=\"pagination pagination-lg\">\n            <li>\n              <a role=\"button\" aria-label=\"Previous\"\n                onClick={this.previous}>\n                <span aria-hidden=\"true\">&laquo;</span>\n              </a>\n            </li>\n            {\n              this.state.pages.map((i) =>\n                <PageButton key={`page-${i}`}\n                  page={i}\n                  current={this.props.page}\n                  clickHandler={this.props.onChangePage} />)\n            }\n            <li>\n              <a role=\"button\" aria-label=\"Next\"\n                onClick={() => this.props.onNext(this.state.pages[4])}>\n                <span aria-hidden=\"true\">&raquo;</span>\n              </a>\n            </li>\n          </ul>\n        </nav>\n      </div>\n    );\n  }\n}\n\nPaginator.propTypes = {\n  page: PropTypes.number.isRequired,\n  maxPage: PropTypes.number.isRequired,\n  onChangePage: PropTypes.func,\n  onNext: PropTypes.func,\n  onPrevious: PropTypes.func,\n};\n\nexport default Paginator;","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Panel, ButtonToolbar, Button, FormGroup, ControlLabel, FormControl, HelpBlock, Checkbox } from 'react-bootstrap';\n// import './style.css';\n\nclass Filters extends Component {\n  state = {\n    name: '',\n    exactMatch: false,\n  };\n\n  changeFilterByName = (event) => {\n    this.setState({\n      name: event.target.value,\n    });\n  }\n\n  reset = () => {\n    if (this.state.name.trim()) {\n      this.setState({ name: '' });\n      this.props.onReset();\n    }\n  }\n\n  submit = (event) => {\n    event.preventDefault();\n    if (this.state.name.trim()) {\n      this.props.onApply();\n    }\n  }\n\n  changeExactMatchFlag = (event) => {\n    this.setState({ exactMatch: event.target.checked })\n  }\n\n  render() {\n    return (\n        <>\n            <form onSubmit={this.submit}>\n                <div className=\"row\">\n                    <div className=\"col-md-4\">\n                        <FormGroup controlId=\"filterByName\">\n                            <ControlLabel>Search by Name</ControlLabel>\n                            <FormControl type=\"text\"\n                                        value={this.state.name}\n                                        onChange={this.changeFilterByName}/>\n                            {/* {!this.state.exactMatch && <HelpBlock>Matching with names that begin with the specified string (e.g. Sp).</HelpBlock>} */}\n                        </FormGroup>\n                        \n                    </div>\n                    <div  className=\"col-md-4\">\n                    <ButtonToolbar>\n                        <Button type=\"reset\" onClick={this.reset}>RESET</Button>\n                        <Button type=\"submit\" bsStyle=\"primary\">APPLY</Button>\n                    </ButtonToolbar>\n                    <Checkbox checked={this.state.exactMatch}\n                                        onChange={this.changeExactMatchFlag}>\n                                Exact match.\n                        </Checkbox>\n                    </div>\n                </div>\n                \n            </form>\n        </>\n    //   <Panel collapsible className=\"Filters\" bsStyle=\"primary\" header=\"Filters\">\n        \n    //   </Panel>\n    );\n  }\n}\n\nFilters.propTypes = {\n  onApply: PropTypes.func,\n  onReset: PropTypes.func,\n};\n\nFilters.defaultProps = {\n  onApply: () => { },\n  onReset: () => { },\n};\n\n\nexport default Filters;","import React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {startLoadingCharapters} from '../../store/actions/charaptersActions'\nimport Caracter from './Caracter';\nimport Paginator from '../widgets/Paginator';\n\nimport {\n  CCol,\n  CRow\n} from '@coreui/react'\nimport Filters from '../widgets/Filter';\n\n\n\nconst Charapters = () => {\n  const dispatch = useDispatch();\n  const state_charapters = useSelector( state => state.characters);\n  const charapters = state_charapters.characters || [];\n  const [filter, setfilter] = useState('')\n\n  \n\n\n  const changePage = (page) => {\n    if (page !== state_charapters.page) {\n      search({\n        page,\n      });\n    }\n  }\n\n  \n\n  const nextPages = (maxPage) => {\n    console.log(maxPage);\n    changePage(maxPage + 1);\n  }\n\n  const previousPages = (minPage) => {\n    if (minPage > 1) {\n      changePage(minPage - 1)\n    }\n  }\n\n  \n\n  const search = (options = {}) => {\n    // this.setState({ loading: true });\n    const {\n      page,\n      name,\n      exactMatch,\n      sortName,\n      limit,\n    } = Object.assign({\n      page: 1,\n      name: state_charapters.filters.name.value,\n      exactMatch: state_charapters.filters.name.exactMatch,\n      sortName: state_charapters.sortName,\n      limit: state_charapters.limitPerPage,\n    }, options);\n\n    const offset = page ? (page - 1) * limit : 0;\n\n    dispatch( startLoadingCharapters({ page, offset, name, exactMatch, sortName, limit }));\n\n  }\n\n\n  useEffect(() => {\n    search()\n  }, [dispatch]);\n\n  const applyFilters = () => {\n    console.log(filter);\n    search({\n      name: filter.state.name,\n      exactMatch: filter.state.exactMatch,\n    }) // .then(afterFilter);\n    // afterFilter()\n   \n  }\n\n  const resetFilters = () => {\n    search({ name: '', exactMatch: false });\n    // afterFilter();\n  }\n\n  const afterFilter = ({ page, maxPage }) => paginator.setPages(page, maxPage)\n\n  // const sortByName = (event) => this.search({ page: this.state.page, sortName: event.target.value })\n\n  // const changeLimitPerPage = (event) => this.search({ page: this.state.page, limit: event.target.value })\n\n  const paginator = {};\n  return (\n    <>\n      <CRow>\n          <CCol md=\"6\">\n            <Paginator ref={paginator => paginator = paginator}\n                    page={state_charapters?.page}\n                    maxPage={state_charapters?.maxPage}\n                    onChangePage={changePage}\n                    onNext={nextPages}\n                    onPrevious={previousPages} />\n          </CCol>\n          <CCol md=\"6\">\n            <Filters ref={filters => setfilter(filters)} onApply={applyFilters} onReset={resetFilters} />\n          </CCol>\n        </CRow>\n    \n      <CRow>\n         \n          {\n            charapters &&\n              charapters.map(charapter=>(\n                <Caracter \n                  key ={charapter.id} \n                  {...charapter} />\n              ))\n          }\n          \n      </CRow>\n      \n    </>\n  )\n}\n\nexport default Charapters\n"],"sourceRoot":""}