{"version":3,"sources":["../node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator/index.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js","store/services/API.js","store/actions/charaptersActions.js","views/stories/Storie.js","views/caracters/CaracterScreen.js"],"names":["module","exports","asyncGeneratorStep","gen","resolve","reject","_next","_throw","key","arg","info","value","error","done","Promise","then","_asyncToGenerator","fn","self","this","args","arguments","apply","err","undefined","marvelURL","hash","apikey","getMarvelCharacters","options","Object","assign","offset","name","exactMatch","sortName","limit","url","fetch","res","json","resObj","code","data","total","Error","pages","Math","floor","characters","results","maxPage","e","console","getComicsByCharacter","characterId","single_character","getStorieById","storieId","url_comics","a","log","storie","datacomics","comics","items","startLoadingCharapters","dispatch","charapters","setCharapters","page","startLoadingSingleCharapter","id","setSingleCharapter","type","types","charaptersLoad","payload","charapter","charapterLoadSingle","Storie","split","slice","to","className","CaracterScreen","useDispatch","useParams","useSelector","state","useEffect","sm","md","src","thumbnail","path","fluid","description","stories","map","historia","resourceURI"],"mappings":"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","file":"static/js/5.0f276b4d.chunk.js","sourcesContent":["module.exports = require(\"regenerator-runtime\");\n","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nexport default function _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}","const marvelURL = 'https://gateway.marvel.com/v1/public/';\n\n// const hash = \"03e206b64b2c7dd6eea20b183d2f259d\";\n// const apikey = \"57a1a3bed71f089b1352bee0703ccbfe\";\n\nconst hash = \"03e206b64b2c7dd6eea20b183d2f259d\";\nconst apikey = \"57a1a3bed71f089b1352bee0703ccbfe\";\n\n\nconst getMarvelCharacters = (options) => {\n  const {\n    offset,\n    name,\n    exactMatch,\n    sortName,\n    limit,\n  } = Object.assign({\n    offset: 0,\n    name: '',\n    exactMatch: false,\n    sortName: '',\n    limit: 20,\n  }, options);\n\n  let url =\n    `${marvelURL}characters?ts=1&apikey=${apikey}&hash=${hash}&offset=${offset}&orderBy=${sortName}name&limit=${limit}`;\n  if (name) {\n    if (exactMatch) { url += `&name=${name}`; }\n    else { url += `&nameStartsWith=${name}`; }\n  }\n  return fetch(url)\n    .then(res => res.json())\n    .then((resObj) => {\n      try {\n        if (resObj.code === 200) {\n          if (offset > resObj.data.total) {\n            throw new Error('Page does not exist.');\n          } else {\n            const pages = Math.floor(resObj.data.total / limit);\n            return {\n              characters: resObj.data.results,\n              maxPage: resObj.data.total % limit > 0 ? pages + 1 : pages,\n            };\n          }\n        } else {\n          throw new Error(`Marvel API bad response. Status code ${resObj.code}.`);\n        }\n      } catch (e) {\n        console.error(e);\n        return {\n          characters: [],\n          maxPage: 0,\n        };\n      }\n    });\n}\n\nconst getComicsByCharacter = (characterId, offset = 0) =>{\n    // const URI = `/v1/public/characters/${characterId}/comics`\n    // const params = `?apikey=${config.publicKey}&limit=20&offset=${offset}`\n    const url = `${marvelURL}characters/${characterId}?ts=1&apikey=${apikey}&hash=${hash}&offset=${offset}&limit=20`\n\n    return fetch(url).then(res => res.json()).then((resObj)=>{\n      return {\n        single_character: resObj.data.results[0]\n      };\n    });\n  }\n\n  const getStorieById = (storieId) =>{\n    const url = `${marvelURL}stories/${storieId}?ts=1&apikey=${apikey}&hash=${hash}`\n    const url_comics = `${marvelURL}stories/${storieId}/comics?ts=1&apikey=${apikey}&hash=${hash}`\n    return fetch(url).then(res => res.json()).then(async (resObj)=>{\n      console.log('getStorieById', resObj);\n      if (resObj.code === 200) {\n        let storie = resObj.data?.results[0]\n        let datacomics = await fetch(url_comics).then(res => res.json());\n        storie.comics.items = datacomics.data?.results;\n        return {\n          storie: storie\n        };\n      } else {\n        return {\n          storie: null\n        };\n      }\n      \n    });\n  }\n\nconst getCharapters = ()=> {\n  const url = `https://gateway.marvel.com:443/v1/public/characters?ts=1&apikey=${apikey}&hash=${hash}`;\n  return fetch(url).then((res)=>res.json());\n}\n\n\nexport {\n  getMarvelCharacters,\n  getComicsByCharacter,\n  getCharapters,\n  getStorieById,\n};","import {types} from '../types';\nimport { getComicsByCharacter, getMarvelCharacters, getStorieById} from '../services/API';\n\nexport const startLoadingCharapters = ( options ) => {\n    return async( dispatch ) => {\n        const charapters = await getMarvelCharacters( options );\n        dispatch( setCharapters( {...charapters, page: options.page} ) );\n\n    }\n}\n\nexport const startLoadingSingleCharapter = ( options ) => {\n    return async( dispatch ) => {\n        const charapters = await getComicsByCharacter( options.id );\n        dispatch( setSingleCharapter( {...charapters, page: options.page} ) );\n\n    }\n}\n\n\nexport const setCharapters = ( charapters ) => ({\n    type: types.charaptersLoad,\n    payload: charapters\n});\n\nexport const setSingleCharapter = ( charapter ) => ({\n    type: types.charapterLoadSingle,\n    payload: charapter\n});\n\n","import { CLink } from \"@coreui/react\";\nimport { useEffect, useState } from \"react\";\nimport { getStorieById} from '../../store/services/API';\n\nconst Storie = ({name, url}) =>{\n    console.log({name, url});\n    const id = url.split('/').slice(-1)[0];\n    // const [storie, setstorie] = useState({});\n    // useEffect(() => {\n    //     loadStorie();\n    // }, [])\n\n    // const loadStorie = ()=> {\n    //    let id = props.url.split('/').slice(-1)[0];\n    //     getStorieById(id).then(resp=>setstorie(resp.storie));\n    // }\n    return (\n        <li>\n            <CLink to={ `/storie/${id}` } className=\"h4 text-warning text-decoration-none\">{name}</CLink>\n        </li>\n        \n        \n\n        // <div>\n        //     {\n        //         (storie && storie.description) && (\n        //             <div>\n                        \n        //                     <CLink to={ `/storie/${storie.id}` } className=\"h4 text-warning text-decoration-none\">{storie.title}</CLink>\n                        \n        //                 <div>{storie.description}</div>\n        //             </div>\n        //         )\n        //     } \n\n                \n           \n\n        // </div>\n    )\n}\n\nexport default Storie","import { CCard, CCardBody, CCardHeader, CCol, CImg, CRow } from '@coreui/react';\nimport React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useParams, } from 'react-router-dom';\nimport { startLoadingSingleCharapter } from '../../store/actions/charaptersActions';\nimport Storie from '../stories/Storie';\n\nconst CaracterScreen = () => {\n    const dispatch = useDispatch();\n    const { id } = useParams();\n    const state_characters = useSelector( state => state.characters);\n    const single_character = state_characters.single_character || {};\n    console.log(single_character);\n    \n    \n    const loadCharacter = () => {\n        dispatch(startLoadingSingleCharapter({id: id}));\n    }\n    useEffect(() => {\n        loadCharacter()\n      }, [id]);\n\n    return(\n        <>\n         <div>\n             {\n                 single_character && (\n                     <div>\n                         <CRow>\n                            <CCol sm=\"12\" md=\"12\">\n                                <CCard className=\"bg-gradient-danger text-white\">\n                                    <CCardBody>\n                                        <CRow>\n                                            <CCol sm=\"6\">\n                                                <CImg\n                                                    src={single_character?.thumbnail?.path + '.jpg'}\n                                                    fluid\n                                                    thumbnail\n                                                    className=\"mb-2\"\n                                                    />\n                                            </CCol>\n                                            <CCol sm=\"6\">\n                                                <div className=\"h4 mb-0\">\n                                                    {single_character.name}\n                                                </div>\n                                                <div className=\"h5 mb-0\">\n                                                    {single_character.description}\n                                                </div>\n                                                <div>\n                                                    <br></br>\n                                                    <CCardHeader>\n                                                    <div className=\"h5 mb-0\">Historias</div>\n                                                    </CCardHeader>\n                                                    <ul>\n                                                    {\n                                                        single_character.stories?.items.map(historia=>(\n                                                            <Storie key={historia.name} name={historia.name} url={historia.resourceURI} ></Storie> \n                                                        ))\n                                                    }\n                                                    </ul>\n                                                    \n                                                    \n                                                    \n                                                </div>\n                                                    \n                                                \n\n                                            </CCol>\n                                        </CRow>\n\n                                    </CCardBody>\n                                    \n                                    \n                                </CCard>\n                            \n                            </CCol>\n                         </CRow>\n\n                         {/* <CRow>\n                            <CCol sm=\"12\" >\n                                <pre>\n                                {JSON.stringify(single_character, null, 2) }\n                                </pre>\n                            </CCol>\n                         </CRow> */}\n                     </div>\n                 )\n             }\n         </div>\n        </>\n        \n    )\n}\n \nexport default CaracterScreen;"],"sourceRoot":""}